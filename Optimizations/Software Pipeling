void cordic_v_fixed_point(int32_t *p_x, int32_t *p_y, int32_t *p_z)
{
    int32_t x_temp_1 = *p_x;
    int32_t y_temp_1 = *p_y;
    int32_t z_temp   = 0;

    int32_t x_shift, y_shift, z_angle;
    int i;

    /** Prologue for loop **/
    y_shift = y_temp_1 >> 0;
    x_shift = x_temp_1 >> 0;
    z_angle = cordic_z_table[0];

    for (i = 0; i < CORDIC_NUM_ITERATIONS - 1; ++i)
    {
        if (y_temp_1 > 0)
        {
            x_temp_1 = x_temp_1 + y_shift;
            y_temp_1 = y_temp_1 - x_shift;
            z_temp   = z_temp + z_angle;
        }
        else
        {
            x_temp_1 = x_temp_1 - y_shift;
            y_temp_1 = y_temp_1 + x_shift;
            z_temp   = z_temp - z_angle;
        }

        // Loading Values for Next Iteration in Parallel
        y_shift = y_temp_1 >> (i + 1);
        x_shift = x_temp_1 >> (i + 1);
        z_angle = cordic_z_table[i + 1];
    }

    /** Epilogue for loop **/
    if (y_temp_1 > 0)
    {
        x_temp_1 = x_temp_1 + y_shift;
        y_temp_1 = y_temp_1 - x_shift;
        z_temp   = z_temp + z_angle;
    }
    else
    {
        x_temp_1 = x_temp_1 - y_shift;
        y_temp_1 = y_temp_1 + x_shift;
        z_temp   = z_temp - z_angle;
    }

    *p_x = x_temp_1;
    *p_y = y_temp_1;
    *p_z = z_temp;
}
